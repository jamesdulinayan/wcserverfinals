{"remainingRequest":"C:\\Users\\Joff\\Videos\\webapp_project\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Joff\\Videos\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Joff\\Videos\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Joff\\Videos\\webapp_project\\client\\src\\views\\News.vue?vue&type=template&id=1aa8c6e6&scoped=true&","dependencies":[{"path":"C:\\Users\\Joff\\Videos\\webapp_project\\client\\src\\views\\News.vue","mtime":1585497459552},{"path":"C:\\Users\\Joff\\Videos\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Joff\\Videos\\webapp_project\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Joff\\Videos\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Joff\\Videos\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}